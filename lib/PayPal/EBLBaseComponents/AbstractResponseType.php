<?php
namespace PayPal\EBLBaseComponents;

use PayPal\Core\PPXmlMessage;
use PayPal\Core\PPUtils;
Use PayPal\EBLBaseComponents\ErrorType;

/**
 * Base type definition of a response payload that can carry
 * any type of payload content with following optional
 * elements: - timestamp of response message, - application
 * level acknowledgement, and - application-level errors and
 * warnings.
 */
class AbstractResponseType
  extends PPXmlMessage
{

    /**
     * This value represents the date and time (GMT) when the
     * response was generated by a service provider (as a result of
     * processing of a request).
     * @access    public
     * @namespace ebl
     * @var string DateTime in ISO8601
     */
    public $Timestamp;

    /**
     * Application level acknowledgement code.
     * @access    public
     * @namespace ebl
     * @var string
     */
    public $Ack;

    /**
     * CorrelationID may be used optionally with an application
     * level acknowledgement.
     * @access    public
     * @namespace ebl
     * @var string
     */
    public $CorrelationID;

    /**
     *
     * @access    public
     * @namespace ebl
     * @var \PayPal\EBLBaseComponents\ErrorType
     */
    public $Errors;

    /**
     * This refers to the version of the response payload schema.
     * @access    public
     * @namespace ebl
     * @var string
     */
    public $Version;

    /**
     * This refers to the specific software build that was used in
     * the deployment for processing the request and generating the
     * response.
     * @access    public
     * @namespace ebl
     * @var string
     */
    public $Build;

    /**
     * @param array  $map    intermediate array representation of XML message to deserialize
     * @param string $isRoot true if this is a root class for SOAP deserialization
     */
    public function init(array $map = array(), $isRoot = true)
    {
        if ($isRoot) {
            if (stristr($map[0]['name'], ":fault")) {
                throw new PPTransformerException("soapfault");
            } else {
                $map = $map[0]['children'];
            }
        }

        if (empty($map)) {
            return;
        }

        if (($first = reset($map)) && !is_array($first) && !is_numeric(key($map))) {
            parent::init($map, false);
            return;
        }

        $propertiesMap = PPUtils::objectProperties($this);
        $arrayCtr      = array();
        foreach ($map as $element) {

            if (empty($element) || empty($element['name'])) {
                continue;
            } elseif (!array_key_exists($property = strtolower($element['name']), $propertiesMap)) {
                if (!preg_match('~^(.+)[\[\(](\d+)[\]\)]$~', $property, $m)) {
                    continue;
                }

                $element['name'] = $m[1];
                $element['num']  = $m[2];
            }
            $element['name'] = $propertiesMap[strtolower($element['name'])];
            if (PPUtils::isPropertyArray($this, $element['name'])) {
                $arrayCtr[$element['name']] = isset($arrayCtr[$element['name']]) ? ($arrayCtr[$element['name']] + 1) : 0;
                $element['num']             = $arrayCtr[$element['name']];
            }
            if (!empty($element["attributes"]) && is_array($element["attributes"])) {
                foreach ($element["attributes"] as $key => $val) {
                    $element["children"][] = array(
                      'name' => $key,
                      'text' => $val,
                    );
                }

                if (isset($element['text'])) {
                    $element["children"][] = array(
                      'name' => 'value',
                      'text' => $element['text'],
                    );
                }

                $this->fillRelation($element['name'], $element);
            } elseif (isset($element['text']) && !is_null($element['text'])) {
                if (isset($element['num'])) {
                    $this->{$element['name']}[$element['num']] = $element['text'];
                } else {
                    $this->{$element['name']} = $element['text'];
                }
            } elseif (!empty($element["children"]) && is_array($element["children"])) {
                $this->fillRelation($element['name'], $element);
            }
        }
    }

    private function fillRelation($property, array $element)
    {
        $type = PPUtils::propertyType($this, $property);

        if ($type === 'string' && $property === 'Errors') {
            $type = ErrorType::class;
        } elseif (!class_exists($type)) {
            trigger_error("Class $type not found.", E_USER_NOTICE);
            return; // just ignore
        }

        if (isset($element['num'])) { // array of objects
            $item = new $type();
            $item->init($element['children'], false);
            $this->{$property}[$element['num']] = $item;
        } else {
            $this->{$property} = new $type();
            $this->{$property}->init($element["children"], false);
        }
    }
}
